// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://reqnroll.net/).
//      Reqnroll Version:3.0.0.0
//      Reqnroll Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace CardValidation.IntegrationTests.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CardValidationFeature : object, global::Xunit.IClassFixture<CardValidationFeature.FixtureData>, global::Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "Card validation", "\tAPI endpoint for credit card data validation either throwing error or providing " +
                "card type", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags, InitializeCucumberMessages());
        
        private global::Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
        public CardValidationFeature(CardValidationFeature.FixtureData fixtureData, global::Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await global::Reqnroll.TestRunnerManager.ReleaseFeatureAsync(featureInfo);
        }
        
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo, global::Reqnroll.RuleInfo ruleInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo, ruleInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<global::Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        private static global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages InitializeCucumberMessages()
        {
            return new global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages("Features/CardValidation.feature.ndjson", 12);
        }
        
        async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.InitializeAsync()
        {
            try
            {
                await this.TestInitializeAsync();
            }
            catch (System.Exception e1)
            {
                try
                {
                    ((global::Xunit.IAsyncLifetime)(this)).DisposeAsync();
                }
                catch (System.Exception e2)
                {
                    throw new System.AggregateException("Test initialization failed", e1, e2);
                }
                throw;
            }
        }
        
        async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Valid Visa card returns ok and correct payment type")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Card validation")]
        [global::Xunit.TraitAttribute("Description", "Valid Visa card returns ok and correct payment type")]
        public async global::System.Threading.Tasks.Task ValidVisaCardReturnsOkAndCorrectPaymentType()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "0";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Valid Visa card returns ok and correct payment type", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
            this.ScenarioInitialize(scenarioInfo, ruleInfo);
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
                await testRunner.GivenAsync("user has a card with details \"John Doe\", \"4111111111111111\", \"03/26\", \"456\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
                await testRunner.WhenAsync("we call the card validation endpoint", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status is 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
                await testRunner.AndAsync("the response body contains \"10\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Valid MasterCard returns ok and correct payment type")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Card validation")]
        [global::Xunit.TraitAttribute("Description", "Valid MasterCard returns ok and correct payment type")]
        public async global::System.Threading.Tasks.Task ValidMasterCardReturnsOkAndCorrectPaymentType()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "1";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Valid MasterCard returns ok and correct payment type", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
            this.ScenarioInitialize(scenarioInfo, ruleInfo);
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
                await testRunner.GivenAsync("user has a card with details \"Jane Doe\", \"5555555555554444\", \"07/27\", \"123\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
                await testRunner.WhenAsync("we call the card validation endpoint", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status is 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
                await testRunner.AndAsync("the response body contains \"20\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Valid AmericanExpress returns ok and correct payment type")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Card validation")]
        [global::Xunit.TraitAttribute("Description", "Valid AmericanExpress returns ok and correct payment type")]
        public async global::System.Threading.Tasks.Task ValidAmericanExpressReturnsOkAndCorrectPaymentType()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "2";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Valid AmericanExpress returns ok and correct payment type", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
            this.ScenarioInitialize(scenarioInfo, ruleInfo);
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
                await testRunner.GivenAsync("user has a card with details \"John Doe\", \"378282246310005\", \"07/27\", \"1234\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
                await testRunner.WhenAsync("we call the card validation endpoint", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status is 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
                await testRunner.AndAsync("the response body contains \"30\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Empty card details returns error status and error messages")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Card validation")]
        [global::Xunit.TraitAttribute("Description", "Empty card details returns error status and error messages")]
        public async global::System.Threading.Tasks.Task EmptyCardDetailsReturnsErrorStatusAndErrorMessages()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "3";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Empty card details returns error status and error messages", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
            this.ScenarioInitialize(scenarioInfo, ruleInfo);
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
                await testRunner.GivenAsync("user has a card with details \"\", \"\", \"\", \"\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
                await testRunner.WhenAsync("we call the card validation endpoint", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status is 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
                await testRunner.AndAsync("the response body has error \"Cvv is required\" for field \"Cvv\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
                await testRunner.AndAsync("the response body has error \"Date is required\" for field \"Date\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
                await testRunner.AndAsync("the response body has error \"Owner is required\" for field \"Owner\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
                await testRunner.AndAsync("the response body has error \"Number is required\" for field \"Number\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="When providing shorter CVV code relevant error message in response")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Card validation")]
        [global::Xunit.TraitAttribute("Description", "When providing shorter CVV code relevant error message in response")]
        public async global::System.Threading.Tasks.Task WhenProvidingShorterCVVCodeRelevantErrorMessageInResponse()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "4";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("When providing shorter CVV code relevant error message in response", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
            this.ScenarioInitialize(scenarioInfo, ruleInfo);
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
                await testRunner.GivenAsync("user has a card with details \"John Doe\", \"4111111111111111\", \"03/26\", \"12\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
                await testRunner.WhenAsync("we call the card validation endpoint", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status is 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
                await testRunner.AndAsync("the response body has error \"Wrong cvv\" for field \"Cvv\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="When providing wrong format CVV code relevant error message in response")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Card validation")]
        [global::Xunit.TraitAttribute("Description", "When providing wrong format CVV code relevant error message in response")]
        public async global::System.Threading.Tasks.Task WhenProvidingWrongFormatCVVCodeRelevantErrorMessageInResponse()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "5";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("When providing wrong format CVV code relevant error message in response", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
            this.ScenarioInitialize(scenarioInfo, ruleInfo);
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
                await testRunner.GivenAsync("user has a card with details \"John Doe\", \"4111111111111111\", \"03/26\", \"gggg\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
                await testRunner.WhenAsync("we call the card validation endpoint", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status is 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
                await testRunner.AndAsync("the response body has error \"Wrong cvv\" for field \"Cvv\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="When providing expired date relevant error message in response")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Card validation")]
        [global::Xunit.TraitAttribute("Description", "When providing expired date relevant error message in response")]
        public async global::System.Threading.Tasks.Task WhenProvidingExpiredDateRelevantErrorMessageInResponse()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "6";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("When providing expired date relevant error message in response", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
            this.ScenarioInitialize(scenarioInfo, ruleInfo);
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
                await testRunner.GivenAsync("user has a card with details \"John Doe\", \"4111111111111111\", \"03/25\", \"123\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
                await testRunner.WhenAsync("we call the card validation endpoint", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status is 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
                await testRunner.AndAsync("the response body has error \"Wrong date\" for field \"Date\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="When providing wrong format date relevant error message in response")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Card validation")]
        [global::Xunit.TraitAttribute("Description", "When providing wrong format date relevant error message in response")]
        public async global::System.Threading.Tasks.Task WhenProvidingWrongFormatDateRelevantErrorMessageInResponse()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "7";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("When providing wrong format date relevant error message in response", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
            this.ScenarioInitialize(scenarioInfo, ruleInfo);
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
                await testRunner.GivenAsync("user has a card with details \"John Doe\", \"4111111111111111\", \"3/27\", \"123\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
                await testRunner.WhenAsync("we call the card validation endpoint", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status is 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
                await testRunner.AndAsync("the response body has error \"Wrong date\" for field \"Date\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="When providing wrong card number relevant error message in response")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Card validation")]
        [global::Xunit.TraitAttribute("Description", "When providing wrong card number relevant error message in response")]
        public async global::System.Threading.Tasks.Task WhenProvidingWrongCardNumberRelevantErrorMessageInResponse()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "8";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("When providing wrong card number relevant error message in response", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
            this.ScenarioInitialize(scenarioInfo, ruleInfo);
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
                await testRunner.GivenAsync("user has a card with details \"John Doe\", \"41111111111111\", \"03/27\", \"123\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
                await testRunner.WhenAsync("we call the card validation endpoint", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status is 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
                await testRunner.AndAsync("the response body has error \"Wrong number\" for field \"Number\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="When providing wrong owner relevant error message in response")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Card validation")]
        [global::Xunit.TraitAttribute("Description", "When providing wrong owner relevant error message in response")]
        public async global::System.Threading.Tasks.Task WhenProvidingWrongOwnerRelevantErrorMessageInResponse()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "9";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("When providing wrong owner relevant error message in response", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
            this.ScenarioInitialize(scenarioInfo, ruleInfo);
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
                await testRunner.GivenAsync("user has a card with details \"333\", \"4111111111111111\", \"03/27\", \"123\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
                await testRunner.WhenAsync("we call the card validation endpoint", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status is 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
                await testRunner.AndAsync("the response body has error \"Wrong owner\" for field \"Owner\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, global::Xunit.IAsyncLifetime
        {
            
            async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.InitializeAsync()
            {
                await CardValidationFeature.FeatureSetupAsync();
            }
            
            async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.DisposeAsync()
            {
                await CardValidationFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
